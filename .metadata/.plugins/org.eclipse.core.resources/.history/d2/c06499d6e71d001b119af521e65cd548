
public class ListaLigada {
	private Celula primeira;
	private Celula ultima;
	private int totalElementos = 0;
	public void adiciona(Object elemento) {
		if(this.totalElementos==0) {
			this.adicionaNoComeco(elemento);
		}else {
			Celula nova= new Celula(elemento);
			//SetUltima´
			this.ultima.setProxima(nova);
			this.ultima=nova;
			this.totalElementos++;
		
		}
		
	}
	public void adiciona(int posicao, Object elemento) {
		if(posicao ==0) {
			this.adicionaNoComeco(elemento);
		}else if(posicao==this.totalElementos){
			//Adiciona no fim, pois é na ultima posicao
			this.adiciona(elemento);
		}else {
			//Pega a celula anterior
			Celula anterior = this.pegaCelula(posicao-1);
			Celula nova = new Celula(anterior.getProxima(),elemento);
			anterior.setProxima(nova);
			this.totalElementos++;
		}
		
		
	}
	public Object pega(int posicao) {
		return this.pegaCelula(posicao).getElemento();
		}
	public void remove(int posicao){
	
	}
	public int tamanho() {
		return 0;
	}
	public boolean contem(Object o) {
		return false;
	}
	public void adicionaNoComeco(Object elemento) {
		Celula nova = new Celula(this.primeira, elemento);
		this.primeira = nova;
		if(this.totalElementos == 0){
			this.ultima=this.primeira;
		}
		this.totalElementos++;
	}
	public void removeDoComeco() {
		if(!this.posicaoOcupado(0)) {
			throw new IllegalArgumentException("Posição não existe");
		}
		this.primeira=this.primeira.getProxima();
		this.totalElementos--;
		if(this.totalElementos==0) {
			this.ultima=null;
		}
	}
	public void removeDoFim() {
		if(!this.posicaoOcupado(this.tamanho()-1)) {
			throw new IllegalArgumentException("Posição não existe");
		}
		this.primeira=this.primeira.getProxima();
		this.totalElementos--;
		if(this.totalElementos==0) {
			this.ultima=null;
		}
	}
	private boolean posicaoOcupado(int pos) {
		return pos>=0 && pos< this.totalElementos;
	}
	private Celula pegaCelula(int pos) {
		if(!this.posicaoOcupado(pos)) {
			throw new IllegalArgumentException("Posição não encontrada");
		}
		Celula atual = primeira;
		for(int i=0; i<pos;i++) {
			//Quando chego no pos-1, pego o ponteiro para a proxima
			atual=atual.getProxima();
		}
		return atual ;
	}
	public String toString() {
		if(this.totalElementos==0) {
			return "[]";
		}
		StringBuilder builder = new StringBuilder("[");
		Celula atual=primeira;
		
		//percorrendo todos os elementos
		for(int i= 0; i < this.totalElementos-1; i++) {
			builder.append(atual.getElemento());
			builder.append(", ");
			atual=atual.getProxima();
		}
		builder.append(atual.getElemento());
		builder.append("]");
		
		
		return builder.toString();
	}
}
